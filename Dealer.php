<?php
/**
 * This class has been generated by TheliaStudio
 * For more information, see https://github.com/thelia-modules/TheliaStudio
 */

namespace Dealer;

use Dealer\Model\DealerContactInfoQuery;
use Dealer\Model\DealerContactQuery;
use Dealer\Model\DealerContentQuery;
use Dealer\Model\DealerFolderQuery;
use Dealer\Model\DealerQuery;
use Dealer\Model\DealerShedulesQuery;
use Symfony\Component\DependencyInjection\Loader\Configurator\ServicesConfigurator;
use Symfony\Component\Finder\Finder;
use Thelia\Core\Template\TemplateDefinition;
use Thelia\Model\Resource;
use Thelia\Model\ResourceQuery;
use Thelia\Module\BaseModule;
use Propel\Runtime\Connection\ConnectionInterface;
use Thelia\Install\Database;

/**
 * Class Dealer
 * @package Dealer
 */
class Dealer extends BaseModule
{
    const MESSAGE_DOMAIN = "dealer";
    const ROUTER = "router.Dealer";
    const DOMAIN_NAME = "dealer";
    const RESOURCES_DEALER = "admin.dealer";
    const RESOURCES_CONTACT = "admin.dealer.contact";
    const RESOURCES_SCHEDULES = "admin.dealer.schedules";
    const RESOURCES_GEO = "admin.dealer.geo";
    const RESOURCES_ASSOCIATED = "admin.dealer.associated";
    const RESOURCES_USERS = "admin.dealer.users";
    const RESOURCES_MODULE = "admin.dealer.module";

    // List of admin profile_id allowed to see ALL the dealers (separated by coma)
    const CONFIG_ALLOW_PROFILE_ID = 'admin_profile_id';

    public function postActivation(ConnectionInterface $con = null): void
    {
        try {
            DealerQuery::create()->findOne();
            DealerContactInfoQuery::create()->findOne();
            DealerContactQuery::create()->findOne();
            DealerShedulesQuery::create()->findOne();
            DealerContentQuery::create()->findOne();
            DealerFolderQuery::create()->findOne();
        } catch (\Exception $e) {
            $database = new Database($con);
            $database->insertSql(null, [__DIR__ . "/Config/thelia.sql"]);
        }

        $this->addResource(self::RESOURCES_DEALER);
        $this->addResource(self::RESOURCES_CONTACT);
        $this->addResource(self::RESOURCES_SCHEDULES);
        $this->addResource(self::RESOURCES_GEO);
        $this->addResource(self::RESOURCES_ASSOCIATED);
        $this->addResource(self::RESOURCES_USERS);
        $this->addResource(self::RESOURCES_MODULE);

        //Initialize the module_config
        self::setConfigValue(self::CONFIG_ALLOW_PROFILE_ID, '');
    }

    public function update($currentVersion, $newVersion, ConnectionInterface $con = null): void
    {
        $finder = Finder::create()
            ->name('*.sql')
            ->depth(0)
            ->sortByName()
            ->in(__DIR__ . DS . 'Config' . DS . 'update');

        $database = new Database($con);

        /** @var \SplFileInfo $file */
        foreach ($finder as $file) {
            if (version_compare($currentVersion, $file->getBasename('.sql'), '<')) {
                $database->insertSql(null, [$file->getPathname()]);
            }
        }
    }

    public function getHooks()
    {
        return [
            array(
                "type" => TemplateDefinition::BACK_OFFICE,
                "code" => "dealer.extra.content.edit",
                "title" => "Dealer Extra Content",
                "description" => [
                    "en_US" => "Allow you to insert element in modules tab on Dealer edit page",
                    "fr_FR" => "Permet l'ajout de contenu sur la partie module de l'edition",
                ],
                "active" => true,
            ),
            array(
                "type" => TemplateDefinition::BACK_OFFICE,
                "code" => "dealer.edit.js",
                "title" => "Dealer Edit Extra Js",
                "description" => [
                    "en_US" => "Allow you to insert js on Dealer edit page",
                    "fr_FR" => "Permet l'ajout de js sur l'edition",
                ],
                "active" => true,
            ),
            array(
                "type" => TemplateDefinition::BACK_OFFICE,
                "code" => "dealer.js",
                "title" => "Dealer Extra Js",
                "description" => [
                    "en_US" => "Allow you to insert js on Dealer list",
                    "fr_FR" => "Permet l'ajout de js sur la liste",
                ],
                "active" => true,
            ),
            array(
                "type" => TemplateDefinition::BACK_OFFICE,
                "code" => "dealer.additional",
                "title" => "Dealer Extra Tab",
                "description" => [
                    "en_US" => "Allow you to insert a tab on Dealer edit page",
                    "fr_FR" => "Permet l'ajout d'une page sur l'edition d'un point de vente",
                ],
                "active" => true,
                "block" => true,
            ),
            array(
                "type" => TemplateDefinition::BACK_OFFICE,
                "code" => "dealer.edit.nav.bar",
                "title" => "Dealer Edition NavBar Link",
                "description" => [
                    "en_US" => "Allow you to insert link between arrow previous and next on edtion view",
                    "fr_FR" => "Permet l'ajout d'un lien sur la page d'édition entre les liens suivant et précedent",
                ],
                "active" => true,
            ),
            array(
                "type" => TemplateDefinition::BACK_OFFICE,
                "code" => "dealer.associated.tabcontent",
                "title" => "Dealer Associated Nav Tab",
                "description" => [
                    "en_US" => "Allow you to insert association content",
                    "fr_FR" => "Permet l'ajout de contenu dans la table d'association",
                ],
                "active" => true,
            ),
        ];
    }

    protected function addResource($code)
    {
        if(null === ResourceQuery::create()->findOneByCode($code)){
            $resource = new Resource();
            $resource->setCode($code);
            $resource->setTitle($code);
            $resource->save();
        }
    }

    public static function configureServices(ServicesConfigurator $servicesConfigurator): void
    {
        $servicesConfigurator->load(self::getModuleCode().'\\', __DIR__)
            ->exclude([THELIA_MODULE_DIR . ucfirst(self::getModuleCode()). "/I18n/*"])
            ->autowire(true)
            ->autoconfigure(true);
    }
}
